{"ast":null,"code":"import { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport { storage } from \"../firebaseConfig\";\nclass UploadFileService {\n  // Async method to upload file to Firebase Storage\n  async uploadFile(file, path) {\n    try {\n      // Creating a reference to the storage location\n      const fileRef = ref(storage, `${path}/${file.name}`);\n      // Uploading the file\n      const uploadTask = uploadBytesResumable(fileRef, file);\n\n      // Handling the upload progress, errors, and success status\n      return await uploadTask.then(async snapshot => {\n        // Getting the download URL after successful upload\n        const url = await getDownloadURL(snapshot.ref);\n        return url;\n      }).catch(err => {\n        // Throwing an error if upload fails\n        throw new Error(`${err}`);\n      });\n    } catch (error) {\n      // Throwing an error if the entire try block fails\n      throw new Error(`${error}`);\n    }\n  }\n}\nexport default UploadFileService;","map":{"version":3,"names":["ref","uploadBytesResumable","getDownloadURL","storage","UploadFileService","uploadFile","file","path","fileRef","name","uploadTask","then","snapshot","url","catch","err","Error","error"],"sources":["D:/Current Project/PAF/PAFSkillFlow_Git/SkillFlow/Frontend/src/Services/UploadFileService.js"],"sourcesContent":["import { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport { storage } from \"../firebaseConfig\";\n\nclass UploadFileService {\n  // Async method to upload file to Firebase Storage\n  async uploadFile(file, path) {\n    try {\n      // Creating a reference to the storage location\n      const fileRef = ref(storage, `${path}/${file.name}`);\n      // Uploading the file\n      const uploadTask = uploadBytesResumable(fileRef, file);\n\n      // Handling the upload progress, errors, and success status\n      return await uploadTask\n        .then(async (snapshot) => {\n          // Getting the download URL after successful upload\n          const url = await getDownloadURL(snapshot.ref);\n          return url;\n        })\n        .catch((err) => {\n          // Throwing an error if upload fails\n          throw new Error(`${err}`);\n        });\n    } catch (error) {\n      // Throwing an error if the entire try block fails\n      throw new Error(`${error}`);\n    }\n  }\n}\n\nexport default UploadFileService;\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,oBAAoB,EAAEC,cAAc,QAAQ,kBAAkB;AAC5E,SAASC,OAAO,QAAQ,mBAAmB;AAE3C,MAAMC,iBAAiB,CAAC;EACtB;EACA,MAAMC,UAAUA,CAACC,IAAI,EAAEC,IAAI,EAAE;IAC3B,IAAI;MACF;MACA,MAAMC,OAAO,GAAGR,GAAG,CAACG,OAAO,EAAG,GAAEI,IAAK,IAAGD,IAAI,CAACG,IAAK,EAAC,CAAC;MACpD;MACA,MAAMC,UAAU,GAAGT,oBAAoB,CAACO,OAAO,EAAEF,IAAI,CAAC;;MAEtD;MACA,OAAO,MAAMI,UAAU,CACpBC,IAAI,CAAC,MAAOC,QAAQ,IAAK;QACxB;QACA,MAAMC,GAAG,GAAG,MAAMX,cAAc,CAACU,QAAQ,CAACZ,GAAG,CAAC;QAC9C,OAAOa,GAAG;MACZ,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAK;QACd;QACA,MAAM,IAAIC,KAAK,CAAE,GAAED,GAAI,EAAC,CAAC;MAC3B,CAAC,CAAC;IACN,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd;MACA,MAAM,IAAID,KAAK,CAAE,GAAEC,KAAM,EAAC,CAAC;IAC7B;EACF;AACF;AAEA,eAAeb,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}